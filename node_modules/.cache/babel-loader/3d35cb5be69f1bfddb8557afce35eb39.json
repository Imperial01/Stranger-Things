{"ast":null,"code":"const cohortName = \"2204-FTB-MT-WEB-PT\";\nconst APIURL = `https://strangers-things.herokuapp.com/api/${cohortName}/`;\nexport const fetchAllPost = async () => {\n  const response = await fetch(`${APIURL}/posts`);\n  const result = await response.json();\n  return result.data.posts;\n};\nexport const fetchRegister = async (userName, password) => {\n  fetch(`${APIURL}users/register`, {\n    method: 'POST',\n    headers: {\n      'Content-Type': 'application/json'\n    },\n    body: JSON.stringify({\n      user: {\n        username: userName,\n        password: password //Example user.username, user.password only working and giving a token. \n        // Tried my username: \"Adrian\" and password:\"12321\"\n        // 'error:\n        //message: \"User already exists, please login instead.\"\n        //name: \"UserExists\" '\n\n      }\n    })\n  }).then(response => response.json()).then(result => {\n    console.log(result);\n  }).catch(console.error);\n};","map":{"version":3,"names":["cohortName","APIURL","fetchAllPost","response","fetch","result","json","data","posts","fetchRegister","userName","password","method","headers","body","JSON","stringify","user","username","then","console","log","catch","error"],"sources":["/Users/adrianimperial/Desktop/Course_work/Stranger things/src/utility/api.js"],"sourcesContent":["const cohortName = \"2204-FTB-MT-WEB-PT\";\nconst APIURL = `https://strangers-things.herokuapp.com/api/${cohortName}/`;\n\nexport const fetchAllPost = async () => {\n    const response = await fetch(`${APIURL}/posts`);\n    const result = await response.json();\n    return (result.data.posts)\n  };\n\n\nexport const fetchRegister = async (userName, password) => {\n  fetch(`${APIURL}users/register`, {\n    method: 'POST',\n    headers: {\n      'Content-Type': 'application/json'\n    },\n    body: JSON.stringify({\n      user: {\n        username: userName,\n        password: password\n\n    //Example user.username, user.password only working and giving a token. \n        // Tried my username: \"Adrian\" and password:\"12321\"\n        // 'error:\n                //message: \"User already exists, please login instead.\"\n                //name: \"UserExists\" '\n      }\n    })\n  }).then(response => response.json())\n    .then(result => {\n      console.log(result)\n    })\n    .catch(console.error)\n}"],"mappings":"AAAA,MAAMA,UAAU,GAAG,oBAAnB;AACA,MAAMC,MAAM,GAAI,8CAA6CD,UAAW,GAAxE;AAEA,OAAO,MAAME,YAAY,GAAG,YAAY;EACpC,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAAE,GAAEH,MAAO,QAAX,CAA5B;EACA,MAAMI,MAAM,GAAG,MAAMF,QAAQ,CAACG,IAAT,EAArB;EACA,OAAQD,MAAM,CAACE,IAAP,CAAYC,KAApB;AACD,CAJI;AAOP,OAAO,MAAMC,aAAa,GAAG,OAAOC,QAAP,EAAiBC,QAAjB,KAA8B;EACzDP,KAAK,CAAE,GAAEH,MAAO,gBAAX,EAA4B;IAC/BW,MAAM,EAAE,MADuB;IAE/BC,OAAO,EAAE;MACP,gBAAgB;IADT,CAFsB;IAK/BC,IAAI,EAAEC,IAAI,CAACC,SAAL,CAAe;MACnBC,IAAI,EAAE;QACJC,QAAQ,EAAER,QADN;QAEJC,QAAQ,EAAEA,QAFN,CAIR;QACI;QACA;QACQ;QACA;;MARJ;IADa,CAAf;EALyB,CAA5B,CAAL,CAiBGQ,IAjBH,CAiBQhB,QAAQ,IAAIA,QAAQ,CAACG,IAAT,EAjBpB,EAkBGa,IAlBH,CAkBQd,MAAM,IAAI;IACde,OAAO,CAACC,GAAR,CAAYhB,MAAZ;EACD,CApBH,EAqBGiB,KArBH,CAqBSF,OAAO,CAACG,KArBjB;AAsBD,CAvBM"},"metadata":{},"sourceType":"module"}